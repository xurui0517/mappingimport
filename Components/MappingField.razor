<div class="row no-gutters d-flex align-items-baseline my-0 p-1" @onclick="@(async (e) => await SelectMappedField())">
    <div class="mapping-field px-2 py-1 rounded d-flex flex-row bg-white justify-content-between align-items-baseline flex-grow-1">
        <div class="col-1 no-gutters mx-1 blur-purple font-weight-bolder text-uppercase"> @MappedField.Column </div>
        <div class="col-4 no-gutters font-weight-bold"> @MappedField.Header </div>
        <div class="col-1 no-gutters align-self-center mx-1 blur-purple font-weight-bolder">
            <i class="fas fa-arrows-alt-h" style="font-size: 1.6em"></i>
        </div>
        <div class="col-6 no-gutters pr-4">
            <select class="form-control font-weight-bold" @onchange="SelectField">
                @foreach (var field in Fields)
                {
                    if (MappedField.Field?.ApiInternalName == field.ApiInternalName)
                    {
                        <option value="@field.ApiInternalName" selected>@field.DisplayName</option>
                    }
                    else
                    {
                        <option value="@field.ApiInternalName">@field.DisplayName</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="ml-4 @iconState align-self-center" style="font-size: 1.2em;" @onclick="ToggleIconState">
        <i class="fas fa-check-circle"></i>
    </div>
</div>

@code {
    [Parameter] public List<ApiMappingField> Fields { get; set; } = new List<ApiMappingField>();
    [Parameter] public EventCallback<MappedField> OnConfirm { get; set; }
    [Parameter] public EventCallback<MappedField> OnSelect { get; set; }
    [Parameter] public MappedField MappedField { get; set; }

    private string iconState;

    protected override Task OnParametersSetAsync()
    {
        SetIconState();
        return base.OnParametersSetAsync();
    }

    private async Task SelectField(ChangeEventArgs e)
    {
        var filedMatch = Fields.Find(p => p.ApiInternalName == e.Value.ToString());
        MappedField.Field = filedMatch;
        await OnConfirm.InvokeAsync(MappedField);
    }

    private async Task SelectMappedField()
    {
        await OnSelect.InvokeAsync(MappedField);
    }

    private async Task ToggleIconState()
    {
        MappedField.Skip = !MappedField.Skip;
        SetIconState();
        await OnConfirm.InvokeAsync(MappedField);
    }

    private void SetIconState()
    {
        iconState = MappedField.Skip ? "check-icon" : "checked-icon";
    }
}
