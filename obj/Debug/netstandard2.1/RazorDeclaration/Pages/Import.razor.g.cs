#pragma checksum "C:\Code\mappingimport\mappingimport\Pages\Import.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8f7c3662a5b89696911e4ad3f4b7e5bb853ad20d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MappingsSquad.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Blazored.SessionStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\mappingimport\mappingimport\Pages\Import.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Code\mappingimport\mappingimport\Pages\Import.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\mappingimport\mappingimport\Pages\Import.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\mappingimport\mappingimport\Pages\Import.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Import")]
    public partial class Import : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 101 "C:\Code\mappingimport\mappingimport\Pages\Import.razor"
       
    private Dictionary<string, MappedField> mappedFields = new Dictionary<string, MappedField>();
    private Dictionary<string, Dictionary<string, string>> excelData = new Dictionary<string, Dictionary<string, string>>();
    private List<MappedField> numberOfMappedFields = new List<MappedField>();
    private List<MappedField> numberOfUnmappedFields = new List<MappedField>();
    private List<MappedField> selectedFields = new List<MappedField>();
    private bool showMappedFields = true;
    private bool showOverlay = false;
    private string errorMessage = string.Empty;
    private bool showSuccessPopup = false;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        mappedFields = await sessionStorage.GetItemAsync<Dictionary<string, MappedField>>("mappedFields");
        if (mappedFields == null || !mappedFields.Any())
        {
            navigationManager.NavigateTo("/MappingsSelection");
            return;
        }
        excelData = await sessionStorage.GetItemAsync<Dictionary<string, Dictionary<string, string>>>("excelData");
        numberOfMappedFields = mappedFields.Where(mappedField => !mappedField.Value.Skip).Select(mappedField => mappedField.Value).ToList();
        numberOfUnmappedFields = mappedFields.Where(mappedField => mappedField.Value.Skip).Select(mappedField => mappedField.Value).ToList();
        selectedFields = numberOfMappedFields;
        await base.OnInitializedAsync();
    }

    private void SelectMappedFields(bool selectMappedFields)
    {
        showMappedFields = selectMappedFields;
        selectedFields = selectMappedFields ? numberOfMappedFields : numberOfUnmappedFields;
    }

    private async Task ImportData()
    {
        loading = true;
        var importStat = new ImportStat();

        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        importStat.StartTime = DateTime.Now.ToString("dd/MM/yyyy hh:mm");

        var selectedDataType = await sessionStorage.GetItemAsync<LabelAndValue>("selectedDataType");

        if (selectedDataType == null)
        {
            navigationManager.NavigateTo("/");
            return;
        }

        IList<Dictionary<string, string>> ilDataType = new List<Dictionary<string, string>>();

        foreach (var row in excelData.Keys)
        {
            if (row != null)
            {
                var rowItem = excelData[row];
                if (rowItem != null)
                {
                    var data = new Dictionary<string, string>();
                    data["ROW"] = row;

                    foreach (var columnName in rowItem.Keys)
                    {
                        var macthedColumn = numberOfMappedFields.Find(e => e.Header.ToLower() == columnName.ToLower());

                        if (macthedColumn != null)
                        {
                            data[macthedColumn.Field.ApiInternalName] = rowItem[columnName];
                        }
                    }

                    ilDataType.Add(data);
                }
            }
        }

        object obImport = new
        {
            importType = selectedDataType.Value,
            importData = ilDataType
        };

        var jObject = JsonConvert.SerializeObject(obImport);

        string strEndPoint = "https://innovationapiteame.zambion.com/";
        strEndPoint += "api/Innovation/InnovationImport?";
        strEndPoint += "Username=ZBN0236&Password=52287F9C-6BCE-4868-A3AE-6939D4FD2448";
        try
        {

            HttpClient httpClient = new HttpClient();
            var stringContent = new StringContent(jObject, UnicodeEncoding.UTF8, "application/json"); // use MediaTypeNames.Application.Json in Core 3.0+ and Standard 2.1+

            HttpResponseMessage response = await httpClient.PostAsync(strEndPoint, stringContent);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                await sessionStorage.SetItemAsync<string>("importResult", responseContent);
                showSuccessPopup = true;
            }
            else
            {
                errorMessage = "There was an exception in the case";
                throw new Exception(response.StatusCode.ToString());
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            showOverlay = true;
        }
        finally
        {
            loading = false;
            stopWatch.Stop();
            importStat.EndTime = DateTime.Now.ToString("dd/MM/yyyy hh:mm");
            importStat.TotalMinutes = stopWatch.Elapsed.TotalMinutes;
            await sessionStorage.SetItemAsync<ImportStat>("importStat", importStat);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
    }
}
#pragma warning restore 1591
