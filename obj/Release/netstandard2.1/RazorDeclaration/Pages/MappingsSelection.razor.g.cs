#pragma checksum "C:\Code\mappingimport\mappingimport\Pages\MappingsSelection.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1297e276c4d4d0018a3c1b057718b98ff2b94186"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MappingsSquad.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using MappingsSquad.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Code\mappingimport\mappingimport\_Imports.razor"
using Blazored.SessionStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\mappingimport\mappingimport\Pages\MappingsSelection.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MappingsSelection")]
    public partial class MappingsSelection : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 72 "C:\Code\mappingimport\mappingimport\Pages\MappingsSelection.razor"
       
    private List<ApiMappingField> apiMappingfields = new List<ApiMappingField>();
    private Dictionary<string, string> headers = new Dictionary<string, string>();
    private Dictionary<string, MappedField> mappedFields = new Dictionary<string, MappedField>();
    private MappedField selectedMappedField = new MappedField();
    private bool loading = true;
    private bool isInvalid = false;
    private bool showOverlay = false;
    private string validationError = "";

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        await GetApiMappingFields();
        headers = await sessionStorage.GetItemAsync<Dictionary<string, string>>("headers");
        if (headers == null)
        {
            navigationManager.NavigateTo("/FileUpload");
        }

        await CreateMappedFields();

        loading = false;

        await base.OnInitializedAsync();
    }


    private void HideOverlay()
    {
        showOverlay = false;
    }

    private void UpdateMappedField(MappedField mappedField)
    {
        mappedFields[mappedField.Column] = mappedField;
        ValidateCompulsaryFields();
    }

    private void SelectMappedField(MappedField mappedField)
    {
        selectedMappedField = mappedField;
        ValidateCompulsaryFields();
    }

    private void ValidateCompulsaryFields()
    {

        var ilCompulsoryField = apiMappingfields.Where(p => p.IsCompulsory == true);

        if (ilCompulsoryField != null && ilCompulsoryField.Count() > 0)
        {
            bool bIsCompulsoryAllMapped = ilCompulsoryField.All(w => mappedFields.Values.Any(o => w.IsCompulsory == true && o.Skip == false && w.ApiInternalName == o.Field?.ApiInternalName));

            if (bIsCompulsoryAllMapped == false)
            {
                string strCompulsoryFields = string.Join(", ", ilCompulsoryField.Select(z => z.DisplayName));
                this.validationError = "Not All Api Compulsary Fields Mapped: " + strCompulsoryFields;
                isInvalid = true;
                return;
            }
        }

        var ilConfirmedNotMapped = mappedFields.Values.Where(p => p.Skip == false && (p.Field?.ApiInternalName == "" || p.Field == null));
        if (ilConfirmedNotMapped != null && ilConfirmedNotMapped.Count() > 0)
        {
            string stronfirmedNotMapped = string.Join(", ", ilConfirmedNotMapped.Select(z => z.Header));
            this.validationError = "Confirm Fields Not Mapped: " + stronfirmedNotMapped;
            isInvalid = true;
            return;
        }

        isInvalid = false;
    }

    private void CreateNewMappedFields()
    {
        try
        {
            foreach (var header in headers)
            {
                if (mappedFields == null)
                {
                    mappedFields = new Dictionary<string, MappedField>();
                }
                // TODO: Some logic here to auto mapp by compareing the name;

                var matchedFiled = apiMappingfields.Find(e => e.DisplayName.ToLower().Contains(header.Value.ToLower()));
                if (matchedFiled == null)
                    matchedFiled = apiMappingfields[0];

                mappedFields.Add(header.Key, new MappedField()
                {
                    Column = header.Key,
                    Header = header.Value,
                    Field = matchedFiled,
                    Skip = true
                });
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task SavingMappedFields()
    {
        this.ValidateCompulsaryFields();
        if (isInvalid)
        {

            this.showOverlay = true;
            return;
        }

        await sessionStorage.SetItemAsync<Dictionary<string, MappedField>>("mappedFields", mappedFields);
        navigationManager.NavigateTo("/Import");
    }

    private async Task<Dictionary<string, MappedField>> GetMappedFields()
    {
        return await sessionStorage.GetItemAsync<Dictionary<string, MappedField>>("mappedFields");
    }

    private async Task CreateMappedFields()
    {
        mappedFields = await GetMappedFields();
        if (mappedFields == null || !mappedFields.Any())
        {
            CreateNewMappedFields();
        }
    }

    private async Task GetApiMappingFields()
    {

        var selectedDataType = await sessionStorage.GetItemAsync<LabelAndValue>("selectedDataType");

        if (selectedDataType == null)
        {
            navigationManager.NavigateTo("/");
            return;
        }

        try
        {
            apiMappingfields = await Http.GetFromJsonAsync<List<ApiMappingField>>("api/Innovation/InnovationImportGetFields?Username=ZBN0236&Password=52287F9C-6BCE-4868-A3AE-6939D4FD2448" + "&strDataType=" + selectedDataType.Value);
            await sessionStorage.SetItemAsync<List<ApiMappingField>>("apiMappingfields", apiMappingfields);
            ApiMappingField ApiMappingField = new ApiMappingField();
            ApiMappingField.ApiInternalName = "";
            ApiMappingField.DisplayName = "Un Mapping";
            ApiMappingField.IsCompulsory = false;

            apiMappingfields.Insert(0, ApiMappingField);
        }
        catch
        {

        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient HttpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
